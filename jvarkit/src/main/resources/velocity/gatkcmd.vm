/*
The MIT License (MIT)

Copyright (c) 2016 Pierre Lindenbaum

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/
package com.github.lindenb.jvarkit.gatk.commands;

@javax.annotation.Generated("velocity")
public
#if(${json.name.asString}=="CommandLineGATK") abstract #end 
class Abstract${json.name.asString} 

	#if(${json.name.asString}=="CommandLineGATK") 
		extends  com.github.lindenb.jvarkit.gatk.GatkCommand
	#else
		extends AbstractCommandLineGATK
	#end
	{
	
	@Override
	protected java.util.List<GatkArg> fillArguments(final java.util.List<GatkArg> arguments) {
			GatkArg arg = null;
	#foreach($argument in ${json.getAsJsonArray("arguments")} )
		arg = _wrapArg(new GatkArg()
			{
			@Override
			protected String name() { return ${argument.name}; }
			@Override
			protected String synonyms() { return ${argument.synonyms}; }
			@Override
			protected String defaultValue() { return ${argument.defaultValue}; }
			@Override
			protected String type() { return ${argument.type}; }
			@Override
			protected String minValue() { return ${argument.minValue}; }			
			@Override
			protected String maxValue() { return ${argument.maxValue}; }			
			@Override
			protected String minRecValue() { return ${argument.minRecValue}; }			
			@Override
			protected String maxRecValue() { return ${argument.maxRecValue}; }							
			@Override
			protected String rodTypes() { return ${argument.rodTypes}; }								
			@Override
			protected String kind() { return ${argument.kind}; }		
			@Override								
			public String summary() { return ${argument.summary}; }
			@Override								
			public String required() { return ${argument.required}; }
			@Override
			protected OptionArg[] options() {
				final OptionArg opts[]=new OptionArg[${argument.getAsJsonArray("options").size()}];
				#foreach($opt in ${argument.getAsJsonArray("options")} )
				 opts[$foreach.count -1 ]= new OptionArg(${opt.name},${opt.summary});
				#end
				return opts;
				}
			});
		if(arg!=null && _acceptArg(arg)) arguments.add(arg);
	#end
		return super.fillArguments(arguments);
		}
	
	#if(${json.name.asString}!="CommandLineGATK") 
	private final  java.util.List<GatkArg> arguments;
	#end
	
	protected  Abstract${json.name.asString}()
		{
		#if(${json.name.asString}!="CommandLineGATK") 
		this.arguments = fillArguments(new java.util.ArrayList<GatkArg>());
		#end
		}
	
	#if(${json.name.asString}!="CommandLineGATK")
	
	@Override
	protected java.util.List<GatkArg> getArguments()
		{
		return this.arguments;
		}
	@Override
	public String getName() {
		return ${json.name};
		}
	@Override
	public String getSummary() {
		return ${json.summary};
		}
	
	#end
	
	

	}
