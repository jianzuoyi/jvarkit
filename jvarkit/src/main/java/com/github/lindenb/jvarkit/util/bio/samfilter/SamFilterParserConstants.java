/* Generated By:JavaCC: Do not edit this line. SamFilterParserConstants.java */
/*
The MIT License (MIT)

Copyright (c) 2017 Pierre Lindenbaum

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/
package com.github.lindenb.jvarkit.util.bio.samfilter;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SamFilterParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int DIGIT = 5;
  /** RegularExpression Id. */
  int LETTER = 6;
  /** RegularExpression Id. */
  int INT = 7;
  /** RegularExpression Id. */
  int OR = 8;
  /** RegularExpression Id. */
  int AND = 9;
  /** RegularExpression Id. */
  int OPAR = 10;
  /** RegularExpression Id. */
  int CPAR = 11;
  /** RegularExpression Id. */
  int NOT = 12;
  /** RegularExpression Id. */
  int ESCAPE_CHAR = 13;
  /** RegularExpression Id. */
  int ISGET = 14;
  /** RegularExpression Id. */
  int READFLAG = 15;
  /** RegularExpression Id. */
  int SIMPLE_QUOTE_LITERAL = 16;
  /** RegularExpression Id. */
  int DOUBLE_QUOTE_LITERAL = 17;
  /** RegularExpression Id. */
  int DUPLICATE = 18;
  /** RegularExpression Id. */
  int UNMAPPED = 19;
  /** RegularExpression Id. */
  int MAPPED = 20;
  /** RegularExpression Id. */
  int MATEUNMAPPED = 21;
  /** RegularExpression Id. */
  int FAILSVENDORQUALITY = 22;
  /** RegularExpression Id. */
  int NOTPRIMARYALIGNMENT = 23;
  /** RegularExpression Id. */
  int SUPPLEMENTARYALIGNMENT = 24;
  /** RegularExpression Id. */
  int PAIRED = 25;
  /** RegularExpression Id. */
  int CLIPPED = 26;
  /** RegularExpression Id. */
  int MAPQUNAVAILABLE = 27;
  /** RegularExpression Id. */
  int OVERLAP = 28;
  /** RegularExpression Id. */
  int SAMFLAG = 29;
  /** RegularExpression Id. */
  int SAMPLE = 30;
  /** RegularExpression Id. */
  int GROUP = 31;
  /** RegularExpression Id. */
  int HASFLAG = 32;
  /** RegularExpression Id. */
  int DISCORDANT = 33;
  /** RegularExpression Id. */
  int MAPQLT = 34;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<DIGIT>",
    "<LETTER>",
    "<INT>",
    "\"||\"",
    "\"&&\"",
    "\"(\"",
    "\")\"",
    "\"!\"",
    "<ESCAPE_CHAR>",
    "<ISGET>",
    "<READFLAG>",
    "<SIMPLE_QUOTE_LITERAL>",
    "<DOUBLE_QUOTE_LITERAL>",
    "<DUPLICATE>",
    "<UNMAPPED>",
    "<MAPPED>",
    "<MATEUNMAPPED>",
    "<FAILSVENDORQUALITY>",
    "<NOTPRIMARYALIGNMENT>",
    "<SUPPLEMENTARYALIGNMENT>",
    "<PAIRED>",
    "<CLIPPED>",
    "<MAPQUNAVAILABLE>",
    "\"overlap\"",
    "\"samFlag\"",
    "\"sample\"",
    "\"group\"",
    "\"hasFlag\"",
    "<DISCORDANT>",
    "\"mapqlt\"",
  };

}
